#textdomain wesnoth-The_Stolen_Sword

#  general tips:

# Make your life easier by using a sensible code editor with wml syntax highlighting. This prevents you from making silly mistakes like spelling errors.
# Good are notepad++ for windows, and Kate for Linux.
# Emacs' wml mode is rewarding and is cross-platform, but emacs is very user hostile, at the start at least.
# Microsoft Office and Open Office are NOT suitable.
# There is now an eclipse plugin around that is worth looking at (still in development) (September 2011).

# Proceed slowly. Change only a little, test often. That way you find mistakes quickly.

# Read the reference wml and the "How to easily debug WML" - thread in the wesnoth forum: http://forums.wesnoth.org/viewtopic.php?f=21&t=14859

# The wesnoth engine emits errors that tell you what's wrong with your add-on's files. On windows, these messages are written to a file named stderr.txt located in the same directory as wesnoth.exe. (On win XP at least - since vista it may be different; there is a thread in the wesnoth forum addressing this.) On Linux and Mac, you have to launch wesnoth from a console to get them. E.g. on ubuntu Linux you would open (Gnome desktop) applications>accessories>terminal and type "wesnoth" there. The wesnoth command should be automatically globally known by your system if you've installed via the package manager and open up wesnoth. When running your campaign, the error messages appear in that terminal then.

# After trying to solve some problem a for a few hours via trial & error, searching the reference wml and forums, you can ask for help in the wml workshop section of the forum. When doing so, PLEASE include code snippets which you post in [code][/code] tags. This way indentation is preserved and it becomes more likely that people will help you quickly. ;)

# For testing any changes you have made to a scenario, it is neccessary to end the scenario, go back to wesnoth's main menu screen and press F5 (CTRL-F5 on Mac (as far as I know)) to cause wesnoth to reload the scenario. There is no faster way, sorry.

# In the folder where this _main.cfg is you find a file named _server.pbl_; it's needed for uploading to the add-ons server and needs to be named _server.pbl. Review and change the values of all of the keys before uploading according to your add-on; you don't need to put a passphrase key the first time that you upload an add-on - if you don't, the passphrase will be generated for you.

# windows users:
# Be careful to spell referenced filenames correctly inside of your wml code (capitalization), since windows is case insensitive in that aspect, while other operating systems are case sensitive.
# Always use only forward slashes (/) as separators in paths to files. Only windows is using backslashes (\).
# Both things would cause errors on other operating systems.
# Don't use paths containing the userdata/ folder to reference maps or other files from within your .cfg files. That folder only exists on windows (sometimes, depending on how you installed Battle for Wesnoth).

#########################################################################################################################

# This file _main.cfg is the only campaign file read directly by the wesnoth engine.
# It includes commands telling something to the engine. A line starting with # is a comment (it is ignored by the engine) unless one of a limited amount of special words follows.

# The textdomain tells the engine where to look for translations.
[textdomain]
	name="wesnoth-The_Stolen_Sword"
	path="data/add-ons/The_Stolen_Sword/translations"
	[/textdomain]

# Use the translation files from this campaign's /translations subdirectory for this file:
# textdomain wesnoth-A_Simple_Campaign

# (The following line is a command for wmllint (a developer tool).)
# wmllint: directory spelling ASC

[campaign]
	id=The_Stolen_Sword # Needed to connect savefiles with their campaign.
	name= _ "The_Stolen_Sword" # Displayed name to the user.
	abbrev="tSS" # Abbreviation used in savefiles.
	define=CAMPAIGN_THE_STOLEN_SWORD # This preprocessor symbol is defined once the player chooses to play the campaign. It needs to match the symbol queried for below exactly.

	difficulties=EASY,NORMAL,HARD # Which various difficulties the campaign shall have. These are preprocessor symbols which do at first nothing. The player selects which one of these gets defined when starting the campaign. You can use them in your code to enable/disable certain things with (e.g.) #idef HARD #else #endif clauses.
	difficulty_descriptions={MENU_IMG_TXT2 "units/drakes/burner.png~RC(magenta>red)" ( _ "Burner") (_ "(Easy)")} + 
    ";*" + {MENU_IMG_TXT2 "units/drakes/flare.png~RC(magenta>red)" ( _ "Flare") (_ "(Normal)")} +
    ";" + {MENU_IMG_TXT2 "units/drakes/flameheart.png~RC(magenta>red)" (_ "Flameheart") (_ "(Hard)")}
    
	# In the following line is an example of how to reference campaign-specific images from outside a campaign's #ifdef clause (see below). In MANY user-made content you will find a so-called "external" or "public" binary path. This is a [binary_path] tag (see below) placed outside of the #ifdef clause (see below) of the add-on, and is not neccessary, and even very bad since by that you make images publicly available. (This situation is due to an ancient bug.)
	icon="units/drakes/burner.png~RC(magenta>red)" # image in the campaign list
	image="portraits/drakes/burner.png" # campaign image right of the campaign list when selected
	description= _ "The merfolk's flaming sword is stolen by a dark sorceress.  A young drake is given the mission to bring it back.  But before stepping on the dangerous the Northern Lands,  he has to pass a crucial test. 
"+ _"(A tutorial campaign for playing drakes against other factions.  Beginner to intermediate level, with 9 battles.)  "
	first_scenario=01_Beach_Cleaning # Scenario that gets chosen first from the scenario list. It looks for a scenario with this id, not with this filename.
[/campaign]

# Enter the following code block only if the player has chosen to play the campaign, thus preventing overwrite conflicts and speeding wesnoth up during startup:
#ifdef CAMPAIGN_THE_STOLEN_SWORD

# Makes images, sounds and music available as subpaths of the .../A_Simple_Campaign/images/, /A_Simple_Campaign/sounds/ and /A_Simple_Campaign/music/ (create it when needed) directories.
[binary_path]
	path=data/add-ons/The_Stolen_Sword/
[/binary_path]

# {filepath} loads all files from filepath. The contents of these directories are inserted at this point. wesnoth doesn't care how you name your directories and files, your directory- and filenames only need to match the way you include them.
# ~ tells to look in the userdata directory, otherwise the wesnoth engine would look in the main data directory.
# The order of these commands is important. Macros, which can be defined in ~add-ons/A_Simple_Campaign/macros or in ~add-ons/A_Simple_Campaign/utils, are needed in the scenarios, thus they must be read previously to the scenarios.
{~add-ons/The_Stolen_Sword/macros}
{~add-ons/The_Stolen_Sword/utils}
{~add-ons/The_Stolen_Sword/maps}
{~add-ons/The_Stolen_Sword/scenarios}
# +units: Perform this command in that [units] tag which was read last - a tag in the wesnoth main data directory (I suppose...) and thus add custom units to the units known by the wesnoth engine.
[+units]
	{~add-ons/The_Stolen_Sword/units}
[/units]
# read custom terrain definitions and according terrain graphics so that they're known in the scenario
{~add-ons/The_Stolen_Sword/terrain}

#endif

